open import Data.Sum
open import Data.Product using (Œ£; _√ó_; _,_; ‚àÉ; Œ£-syntax; ‚àÉ-syntax)
open import Data.Bool using (Bool; if_then_else_)
open Bool using (true; false)

open import Relation.Nullary using (¬¨_; contradiction)
import Relation.Binary.PropositionalEquality as Eq
open Eq using (refl)

open import Type
open import Context
open import Process
open import Reduction
open import Congruence

data Thread : ‚àÄ{Œì} -> Process Œì -> Set where
  link :
    ‚àÄ{Œì A B}
    (d : Dual A B) (p : Œì ‚âÉ [ A ] + [ B ]) -> Thread (link d p)
  fail :
    ‚àÄ{Œì Œî}
    (p : Œì ‚âÉ ‚ä§ , Œî) -> Thread (fail p)
  wait :
    ‚àÄ{Œì Œî} (p : Œì ‚âÉ ‚ä• , Œî) {P : Process Œî} -> Thread (wait p P)
  case :
    ‚àÄ{Œì Œî A B} (p : Œì ‚âÉ A & B , Œî) {P : Process (A :: Œî)} {Q : Process (B :: Œî)} ->
    Thread (case p P Q)
  join :
    ‚àÄ{Œì Œî A B} (p : Œì ‚âÉ A ‚Öã B , Œî) {P : Process (B :: A :: Œî)} ->
    Thread (join p P)
  close : Thread close
  select :
    ‚àÄ{Œì Œî A B} (x : Bool) (p : Œì ‚âÉ A ‚äï B , Œî) {P : Process ((if x then A else B) :: Œî)} ->
    Thread (select x p P)
  fork :
    ‚àÄ{Œì Œî Œî‚ÇÅ Œî‚ÇÇ A B} (p : Œì ‚âÉ A ‚äó B , Œî) (q : Œî ‚âÉ Œî‚ÇÅ + Œî‚ÇÇ)
    {P : Process (A :: Œî‚ÇÅ)} {Q : Process (B :: Œî‚ÇÇ)} ->
    Thread (fork p q P Q)
  -- server :
  --   ‚àÄ{Œì Œî A} (p : Œì ‚âÉ ¬° A , Œî) (un : Un Œî)
  --   {P : Process (A :: Œî)} ->
  --   Thread (server p un P)
  -- client :
  --   ‚àÄ{Œì Œî A} (p : Œì ‚âÉ ¬ø A , Œî)
  --   {P : Process (A :: Œî)} ->
  --   Thread (client p P)
  -- weaken :
  --   ‚àÄ{Œì Œî A} (p : Œì ‚âÉ ¬ø A , Œî)
  --   {P : Process Œî} ->
  --   Thread (weaken p P)
  -- contract :
  --   ‚àÄ{Œì Œî A} (p : Œì ‚âÉ ¬ø A , Œî)
  --   {P : Process (¬ø A :: ¬ø A :: Œî)} ->
  --   Thread (contract p P)

data Cut {Œì} : Process Œì -> Set where
  cut :
    ‚àÄ{Œì‚ÇÅ Œì‚ÇÇ A B} (d : Dual A B) (p : Œì ‚âÉ Œì‚ÇÅ + Œì‚ÇÇ)
    {P : Process (A :: Œì‚ÇÅ)} {Q : Process (B :: Œì‚ÇÇ)} ->
    Cut (cut d p P Q)

process-is : ‚àÄ{Œì} (P : Process Œì) -> Thread P ‚äé Cut P
process-is close = inj‚ÇÅ close
process-is (link d p) = inj‚ÇÅ (link d p)
process-is (fail p) = inj‚ÇÅ (fail p)
process-is (wait p P) = inj‚ÇÅ (wait p)
process-is (select x p P) = inj‚ÇÅ (select x p)
process-is (case p P Q) = inj‚ÇÅ (case p)
process-is (fork p q P Q) = inj‚ÇÅ (fork p q)
process-is (join p P) = inj‚ÇÅ (join p)
process-is (server p un P) = inj‚ÇÅ (server p un)
process-is (client p P) = inj‚ÇÅ (client p)
process-is (weaken p P) = inj‚ÇÅ (weaken p)
process-is (contract p P) = inj‚ÇÅ (contract p)
process-is (cut d p P Q) = inj‚ÇÇ (cut d p)

data Link {Œì} : Process Œì -> Set where
  link :
    ‚àÄ{A B} (d : Dual A B) (p : Œì ‚âÉ [ A ] + [ B ]) -> Link (link d p)

data Delayed : ‚àÄ{Œì} -> Process Œì -> Set where
  fail :
    ‚àÄ{A Œì Œî}
    (p : Œì ‚âÉ ‚ä§ , Œî) -> Delayed (fail (split-r {A} p))
  wait :
    ‚àÄ{C Œì Œî} (p : Œì ‚âÉ ‚ä• , Œî) {P : Process (C :: Œî)} -> Delayed (wait (split-r p) P)
  case :
    ‚àÄ{Œì Œî C A B} (p : Œì ‚âÉ A & B , Œî) {P : Process (A :: C :: Œî)} {Q : Process (B :: C :: Œî)} ->
    Delayed (case (split-r p) P Q)
  join :
    ‚àÄ{Œì Œî C A B} (p : Œì ‚âÉ A ‚Öã B , Œî) {P : Process (B :: A :: C :: Œî)} ->
    Delayed (join (split-r p) P)
  select :
    ‚àÄ{Œì Œî C A B} (x : Bool) (p : Œì ‚âÉ A ‚äï B , Œî) {P : Process ((if x then A else B) :: C :: Œî)} ->
    Delayed (select x (split-r p) P)
  fork-l :
    ‚àÄ{Œì Œî Œî‚ÇÅ Œî‚ÇÇ C A B} (p : Œì ‚âÉ A ‚äó B , Œî) (q : Œî ‚âÉ Œî‚ÇÅ + Œî‚ÇÇ)
    {P : Process (A :: C :: Œî‚ÇÅ)} {Q : Process (B :: Œî‚ÇÇ)} ->
    Delayed (fork (split-r p) (split-l q) P Q)
  fork-r :
    ‚àÄ{Œì Œî Œî‚ÇÅ Œî‚ÇÇ C A B} (p : Œì ‚âÉ A ‚äó B , Œî) (q : Œî ‚âÉ Œî‚ÇÅ + Œî‚ÇÇ)
    {P : Process (A :: Œî‚ÇÅ)} {Q : Process (B :: C :: Œî‚ÇÇ)} ->
    Delayed (fork (split-r p) (split-r q) P Q)

data DelayedClient : ‚àÄ{Œì} -> Process Œì -> Set where
  client :
    ‚àÄ{Œì Œî A C} (p : Œì ‚âÉ ¬ø A , Œî) {P : Process (A :: C :: Œî)} ->
    DelayedClient (client (split-r p) P)
  weaken :
    ‚àÄ{Œì Œî A C} (p : Œì ‚âÉ ¬ø A , Œî) {P : Process (C :: Œî)} ->
    DelayedClient (weaken (split-r p) P)
  contract :
    ‚àÄ{Œì Œî A C} (p : Œì ‚âÉ ¬ø A , Œî) {P : Process (¬ø A :: ¬ø A :: C :: Œî)} ->
    DelayedClient (contract (split-r p) P)

data DelayedServer : ‚àÄ{Œì} -> Process Œì -> Set where
  server :
    ‚àÄ{Œì Œî A C} (p : Œì ‚âÉ ¬° A , Œî) (un : Un Œî) {P : Process (A :: ¬ø C :: Œî)} ->
    DelayedServer (server (split-r p) (un-:: un) P)

thread-is : ‚àÄ{Œì} {P : Process Œì} -> Thread P ->
  Link P ‚äé Delayed P ‚äé Input P ‚äé Output P
thread-is (link d p) = inj‚ÇÅ (link d p)
thread-is (fail (split-l p)) = inj‚ÇÇ (inj‚ÇÇ (inj‚ÇÅ (fail p)))
thread-is (fail (split-r p)) = inj‚ÇÇ (inj‚ÇÅ (fail p))
thread-is (wait (split-l p)) = inj‚ÇÇ (inj‚ÇÇ (inj‚ÇÅ (wait p)))
thread-is (wait (split-r p)) = inj‚ÇÇ (inj‚ÇÅ (wait p))
thread-is (case (split-l p)) = inj‚ÇÇ (inj‚ÇÇ (inj‚ÇÅ (case p)))
thread-is (case (split-r p)) = inj‚ÇÇ (inj‚ÇÅ (case p))
thread-is (join (split-l p)) = inj‚ÇÇ (inj‚ÇÇ (inj‚ÇÅ (join p)))
thread-is (join (split-r p)) = inj‚ÇÇ (inj‚ÇÅ (join p))
thread-is close = inj‚ÇÇ (inj‚ÇÇ (inj‚ÇÇ close))
thread-is (select x (split-l p)) = inj‚ÇÇ (inj‚ÇÇ (inj‚ÇÇ (select x p)))
thread-is (select x (split-r p)) = inj‚ÇÇ (inj‚ÇÅ (select x p))
thread-is (fork (split-l p) q) = inj‚ÇÇ (inj‚ÇÇ (inj‚ÇÇ (fork p q)))
thread-is (fork (split-r p) (split-l q)) = inj‚ÇÇ (inj‚ÇÅ (fork-l p q))
thread-is (fork (split-r p) (split-r q)) = inj‚ÇÇ (inj‚ÇÅ (fork-r p q))
thread-is (server (split-l p) un) = inj‚ÇÇ (inj‚ÇÇ (inj‚ÇÇ (server p un)))
thread-is (server (split-r p) (un-:: un)) = inj‚ÇÇ (inj‚ÇÅ (server p un))
thread-is (client (split-l p)) = inj‚ÇÇ (inj‚ÇÇ (inj‚ÇÅ (client p)))
thread-is (client (split-r p)) = inj‚ÇÇ (inj‚ÇÅ (client p))
thread-is (weaken (split-l p)) = inj‚ÇÇ (inj‚ÇÇ (inj‚ÇÅ (weaken p)))
thread-is (weaken (split-r p)) = inj‚ÇÇ (inj‚ÇÅ (weaken p))
thread-is (contract (split-l p)) = inj‚ÇÇ (inj‚ÇÇ (inj‚ÇÅ (contract p)))
thread-is (contract (split-r p)) = inj‚ÇÇ (inj‚ÇÅ (contract p))

data CanonicalCut {Œì} : Process Œì -> Set where
  cc-link :
    ‚àÄ{Œì‚ÇÅ Œì‚ÇÇ A B} (d : Dual A B) (p : Œì ‚âÉ Œì‚ÇÅ + Œì‚ÇÇ)
    {P : Process (A :: Œì‚ÇÅ)} {Q : Process (B :: Œì‚ÇÇ)} ->
    Link P -> CanonicalCut (cut d p P Q)
  cc-delayed :
    ‚àÄ{Œì‚ÇÅ Œì‚ÇÇ A B} (d : Dual A B) (p : Œì ‚âÉ Œì‚ÇÅ + Œì‚ÇÇ)
    {P : Process (A :: Œì‚ÇÅ)} {Q : Process (B :: Œì‚ÇÇ)} ->
    Delayed P -> CanonicalCut (cut d p P Q)
  cc-redex :
    ‚àÄ{Œì‚ÇÅ Œì‚ÇÇ A B} (d : Dual A B) (p : Œì ‚âÉ Œì‚ÇÅ + Œì‚ÇÇ)
    {P : Process (A :: Œì‚ÇÅ)} {Q : Process (B :: Œì‚ÇÇ)} ->
    Output P -> Input Q -> CanonicalCut (cut d p P Q)

canonical-cut :
  ‚àÄ{Œì Œì‚ÇÅ Œì‚ÇÇ A B}
  {P : Process (A :: Œì‚ÇÅ)} {Q : Process (B :: Œì‚ÇÇ)}
  (d : Dual A B) (p : Œì ‚âÉ Œì‚ÇÅ + Œì‚ÇÇ) ->
  Thread P -> Thread Q ->
  ‚àÉ[ R ] CanonicalCut R √ó cut d p P Q ‚äí R
canonical-cut dc pc Pt Qt with thread-is Pt | thread-is Qt
... | inj‚ÇÅ x | y = _ , cc-link dc pc x , s-refl
... | inj‚ÇÇ (inj‚ÇÅ x) | y = _ , cc-delayed dc pc x , s-refl
... | inj‚ÇÇ (inj‚ÇÇ x) | inj‚ÇÅ y = _ , cc-link (dual-symm dc) (+-comm pc) y , s-comm dc (dual-symm dc) pc (+-comm pc)
... | inj‚ÇÇ (inj‚ÇÇ x) | inj‚ÇÇ (inj‚ÇÅ y) = _ , cc-delayed (dual-symm dc) (+-comm pc) y , s-comm dc (dual-symm dc) pc (+-comm pc)
... | inj‚ÇÇ (inj‚ÇÇ (inj‚ÇÅ x)) | inj‚ÇÇ (inj‚ÇÇ (inj‚ÇÅ y)) = contradiction (x , y) (input-input dc)
... | inj‚ÇÇ (inj‚ÇÇ (inj‚ÇÅ x)) | inj‚ÇÇ (inj‚ÇÇ (inj‚ÇÇ y)) = _ , cc-redex (dual-symm dc) (+-comm pc) y x , s-comm dc (dual-symm dc) pc (+-comm pc)
... | inj‚ÇÇ (inj‚ÇÇ (inj‚ÇÇ x)) | inj‚ÇÇ (inj‚ÇÇ (inj‚ÇÅ y)) = _ , cc-redex dc pc x y , s-refl
... | inj‚ÇÇ (inj‚ÇÇ (inj‚ÇÇ x)) | inj‚ÇÇ (inj‚ÇÇ (inj‚ÇÇ y)) = contradiction (x , y) (output-output dc)

Observable : ‚àÄ{Œì} -> Process Œì -> Set
Observable P = ‚àÉ[ Q ] P ‚äí Q √ó Thread Q

Live : ‚àÄ{Œì} -> Process Œì -> Set
Live P = Observable P ‚äé Reducible P

live-threads :
  ‚àÄ{Œì Œì‚ÇÅ Œì‚ÇÇ A B}
  {P : Process (A :: Œì‚ÇÅ)} {Q : Process (B :: Œì‚ÇÇ)}
  (d : Dual A B) (p : Œì ‚âÉ Œì‚ÇÅ + Œì‚ÇÇ) ->
  Thread P -> Thread Q -> Live (cut d p P Q)
live-threads dc pc Pt Qt = {!!}

DeadlockFree : ‚àÄ{Œì} -> Process Œì -> Set
DeadlockFree {Œì} P = ‚àÄ(Q : Process Œì) -> P => Q -> Live Q

‚äíLive : ‚àÄ{Œì} {P Q : Process Œì} -> P ‚äí Q -> Live Q -> Live P
‚äíLive pcong (inj‚ÇÅ (_ , x , th)) = inj‚ÇÅ (_ , s-tran pcong x , th)
‚äíLive pcong (inj‚ÇÇ (_ , red)) = inj‚ÇÇ (_ , r-cong pcong red)

live-cut : ‚àÄ{Œì} {P : Process Œì} -> CanonicalCut P -> Live P
live-cut (cc-link d p (link e (split-l (split-r split-e)))) with dual-fun-r e d
... | refl = inj‚ÇÇ (_ , r-link d e p)
live-cut (cc-link d p (link e (split-r (split-l split-e)))) with dual-fun-l e (dual-symm d)
... | refl = inj‚ÇÇ (_ , r-cong (s-cong-l d p (s-link e (split-r (split-l split-e)))) (r-link d (dual-symm e) p))
live-cut (cc-redex d-ùüô-‚ä• p close (wait q)) with +-empty-l q | +-empty-l p
... | refl | refl = inj‚ÇÇ (_ , r-close p q)
live-cut (cc-redex (d-‚äï-& d e) p (select false q) (case r)) with +-empty-l q | +-empty-l r
... | refl | refl = inj‚ÇÇ (_ , r-select-r d e p q r)
live-cut (cc-redex (d-‚äï-& d e) p (select true q) (case r)) with +-empty-l q | +-empty-l r
... | refl | refl = inj‚ÇÇ (_ , r-select-l d e p q r)
live-cut (cc-redex (d-‚äó-‚Öã d e) p (fork q r) (join s)) with +-empty-l q | +-empty-l s
... | refl | refl = inj‚ÇÇ (_ , r-fork d e p s r q)
live-cut (cc-redex (d-!-? d) p (server q un) (client r)) with +-empty-l q | +-empty-l r
... | refl | refl = inj‚ÇÇ (_ , r-client d p q r un)
live-cut (cc-redex (d-!-? d) p (server q un) (weaken r)) with +-empty-l q | +-empty-l r
... | refl | refl = inj‚ÇÇ (_ , r-weaken d p q r un)
live-cut (cc-redex (d-!-? d) p (server q un) (contract r)) with +-empty-l q | +-empty-l r
... | refl | refl = inj‚ÇÇ (_ , r-contract d p q r un)
-- live-cut (cc-delayed d p (fail q)) = inj‚ÇÇ (_ , r-fail d p q)
live-cut (cc-delayed d p (wait q)) =
  let _ , _ , q' = +-assoc-l p q in
  inj‚ÇÅ (_ , s-wait d p q , wait q')
live-cut (cc-delayed d p (case q)) =
  let _ , _ , q' = +-assoc-l p q in
  inj‚ÇÅ (_ , s-case d p q , case q')
live-cut (cc-delayed d p (join q)) =
  let _ , _ , q' = +-assoc-l p q in
  inj‚ÇÅ (_ , s-join d p q , join q')
live-cut (cc-delayed d p (select false q)) =
  let _ , _ , q' = +-assoc-l p q in
  inj‚ÇÅ (_ , s-select-r d p q , select false q')
live-cut (cc-delayed d p (select true q)) =
  let _ , _ , q' = +-assoc-l p q in
  inj‚ÇÅ (_ , s-select-l d p q , select true q')
live-cut (cc-delayed d p (fork-l q r)) =
  let _ , p' , q' = +-assoc-l p q in
  let _ , p'' , r' = +-assoc-l p' r in
  let _ , q'' , r'' = +-assoc-r r' (+-comm p'') in
  inj‚ÇÅ (_ , s-fork-l d p q r , fork q' r'')
live-cut (cc-delayed d p (fork-r q r)) =
  let _ , p' , q' = +-assoc-l p q in
  let _ , p'' , r' = +-assoc-l p' r in
  inj‚ÇÅ (_ , s-fork-r d p q r , fork q' r')
live-cut (cc-delayed d p (fail q)) = {!!}
live-cut (cc-delayed d p (server q un)) = {!!}
live-cut (cc-delayed d p (client q)) =
  let _ , _ , q' = +-assoc-l p q in
  inj‚ÇÅ (_ , s-client d p q , client q')
live-cut (cc-delayed d p (weaken q)) =
  let _ , _ , q' = +-assoc-l p q in
  inj‚ÇÅ (_ , s-weaken d p q , weaken q')
live-cut (cc-delayed d p (contract q)) =
  let _ , _ , q' = +-assoc-l p q in
  inj‚ÇÅ (_ , s-contract d p q , contract q')

live : ‚àÄ{Œì} (P : Process Œì) -> Live P
live P with process-is P
... | inj‚ÇÅ x = inj‚ÇÅ (_ , s-refl , x)
... | inj‚ÇÇ (cut d p {P} {Q}) with live P
... | inj‚ÇÇ (P' , red) = inj‚ÇÇ (_ , r-cut d p red)
... | inj‚ÇÅ (P' , Pc , Pt) with live Q
... | inj‚ÇÇ (Q' , red) = inj‚ÇÇ (_ , r-cong (s-comm d (dual-symm d) p (+-comm p)) (r-cut (dual-symm d) (+-comm p) red))
... | inj‚ÇÅ (Q' , Qc , Qt) with canonical-cut d p Pt Qt
... | _ , cc , pcong = ‚äíLive (s-tran (s-cong-2 d p Pc Qc) pcong) (live-cut cc)

deadlock-freedom : ‚àÄ{Œì} (P : Process Œì) -> DeadlockFree P
deadlock-freedom P Q reds = live Q

data Close : ‚àÄ{Œì} -> Process Œì -> Set where
  close : Close close

thread-closed : {P : Process [ ùüô ]} -> Thread P -> Close P
thread-closed (link d (split-l ()))
thread-closed (link d (split-r ()))
thread-closed (fail (split-r ()))
thread-closed (wait (split-r ()))
thread-closed (case (split-r ()))
thread-closed (join (split-r ()))
thread-closed close = close
thread-closed (select x (split-r ()))
thread-closed (fork (split-r ()) q)
thread-closed (server (split-r ()) un)
thread-closed (client (split-r ()))
thread-closed (weaken (split-r ()))
thread-closed (contract (split-r ()))

‚äíClose : {P Q : Process [ ùüô ]} -> P ‚äí Q -> Close Q -> Close P
‚äíClose s-refl Qc = Qc
‚äíClose (s-tran pcong‚ÇÅ pcong‚ÇÇ) Qc = ‚äíClose pcong‚ÇÅ (‚äíClose pcong‚ÇÇ Qc)

Live' : ‚àÄ{Œì} -> Process Œì -> Set
Live' P = Close P ‚äé Reducible P

DeadlockFree' : ‚àÄ{Œì} -> Process Œì -> Set
DeadlockFree' {Œì} P = ‚àÄ(Q : Process Œì) -> P => Q -> Live' Q

live' : (P : Process [ ùüô ]) -> Live' P
live' P with live P
... | inj‚ÇÇ x = inj‚ÇÇ x
... | inj‚ÇÅ (Q , pcong , Qt) = inj‚ÇÅ (‚äíClose pcong (thread-closed Qt))

deadlock-freedom' : (P : Process [ ùüô ]) -> DeadlockFree' P
deadlock-freedom' P Q reds = live' Q
