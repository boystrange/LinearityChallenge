# Subtyping

This module defines subtyping and proves its soundness.

## Imports

```agda
open import Data.Bool using (Bool; if_then_else_)
open Bool using (true; false)
open import Data.Sum
open import Data.Product using (Œ£; _√ó_; _,_; ‚àÉ; Œ£-syntax; ‚àÉ-syntax)
open import Relation.Nullary using (¬¨_; contradiction)
import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; refl; cong‚ÇÇ)

open import Type
open import Context
open import Process
open import LinkElimination
```

## Definition

We start by defining the subtyping relation `‚âº` for (finite)
session types as described in the paper by [Horne and
Padovani](http://dx.doi.org/10.1016/j.jlamp.2024.100986). Basically,
ùüò is the least session type and ‚ä§ is the greatest one. Every other
relation follows from the expected properties of `‚âº`: it should be
reflexive on constants and *covariant* with respect to every
connective.

```agda
infix 4 _‚âº_

data _‚âº_ : Type -> Type -> Set where
  sub-0 : ‚àÄ{A} -> ùüò ‚âº A
  sub-‚ä§ : ‚àÄ{A} -> A ‚âº ‚ä§
  sub-1 : ùüô ‚âº ùüô
  sub-‚ä• : ‚ä• ‚âº ‚ä•
  sub-& : ‚àÄ{A B A' B'} -> A ‚âº A' -> B ‚âº B' -> A & B ‚âº A' & B'
  sub-‚äï : ‚àÄ{A B A' B'} -> A ‚âº A' -> B ‚âº B' -> A ‚äï B ‚âº A' ‚äï B'
  sub-‚Öã : ‚àÄ{A B A' B'} -> A ‚âº A' -> B ‚âº B' -> A ‚Öã B ‚âº A' ‚Öã B'
  sub-‚äó : ‚àÄ{A B A' B'} -> A ‚âº A' -> B ‚âº B' -> A ‚äó B ‚âº A' ‚äó B'
```

## Properties

The fact that `‚âº` is reflexive in general, transitive and
antisymmetric is proved below.

```agda
‚âº-refl : ‚àÄ{A} -> A ‚âº A
‚âº-refl {ùüò} = sub-0
‚âº-refl {ùüô} = sub-1
‚âº-refl {‚ä•} = sub-‚ä•
‚âº-refl {‚ä§} = sub-‚ä§
‚âº-refl {A & B} = sub-& ‚âº-refl ‚âº-refl
‚âº-refl {A ‚äï B} = sub-‚äï ‚âº-refl ‚âº-refl
‚âº-refl {A ‚äó B} = sub-‚äó ‚âº-refl ‚âº-refl
‚âº-refl {A ‚Öã B} = sub-‚Öã ‚âº-refl ‚âº-refl

‚âº-tran : ‚àÄ{A B C} -> A ‚âº B -> B ‚âº C -> A ‚âº C
‚âº-tran sub-0 t = sub-0
‚âº-tran s sub-‚ä§ = sub-‚ä§
‚âº-tran sub-1 t = t
‚âº-tran sub-‚ä• t = t
‚âº-tran (sub-& s‚ÇÅ s‚ÇÇ) (sub-& t‚ÇÅ t‚ÇÇ) = sub-& (‚âº-tran s‚ÇÅ t‚ÇÅ) (‚âº-tran s‚ÇÇ t‚ÇÇ)
‚âº-tran (sub-‚äï s‚ÇÅ s‚ÇÇ) (sub-‚äï t‚ÇÅ t‚ÇÇ) = sub-‚äï (‚âº-tran s‚ÇÅ t‚ÇÅ) (‚âº-tran s‚ÇÇ t‚ÇÇ)
‚âº-tran (sub-‚Öã s‚ÇÅ s‚ÇÇ) (sub-‚Öã t‚ÇÅ t‚ÇÇ) = sub-‚Öã (‚âº-tran s‚ÇÅ t‚ÇÅ) (‚âº-tran s‚ÇÇ t‚ÇÇ)
‚âº-tran (sub-‚äó s‚ÇÅ s‚ÇÇ) (sub-‚äó t‚ÇÅ t‚ÇÇ) = sub-‚äó (‚âº-tran s‚ÇÅ t‚ÇÅ) (‚âº-tran s‚ÇÇ t‚ÇÇ)

‚âº-anti-symm : ‚àÄ{A B} -> A ‚âº B -> B ‚âº A -> A ‚â° B
‚âº-anti-symm sub-0 sub-0 = refl
‚âº-anti-symm sub-‚ä§ sub-‚ä§ = refl
‚âº-anti-symm sub-1 sub-1 = refl
‚âº-anti-symm sub-‚ä• sub-‚ä• = refl
‚âº-anti-symm (sub-& s‚ÇÅ s‚ÇÇ) (sub-& t‚ÇÅ t‚ÇÇ) = cong‚ÇÇ _&_ (‚âº-anti-symm s‚ÇÅ t‚ÇÅ) (‚âº-anti-symm s‚ÇÇ t‚ÇÇ)
‚âº-anti-symm (sub-‚äï s‚ÇÅ s‚ÇÇ) (sub-‚äï t‚ÇÅ t‚ÇÇ) = cong‚ÇÇ _‚äï_ (‚âº-anti-symm s‚ÇÅ t‚ÇÅ) (‚âº-anti-symm s‚ÇÇ t‚ÇÇ)
‚âº-anti-symm (sub-‚Öã s‚ÇÅ s‚ÇÇ) (sub-‚Öã t‚ÇÅ t‚ÇÇ) = cong‚ÇÇ _‚Öã_ (‚âº-anti-symm s‚ÇÅ t‚ÇÅ) (‚âº-anti-symm s‚ÇÇ t‚ÇÇ)
‚âº-anti-symm (sub-‚äó s‚ÇÅ s‚ÇÇ) (sub-‚äó t‚ÇÅ t‚ÇÇ) = cong‚ÇÇ _‚äó_ (‚âº-anti-symm s‚ÇÅ t‚ÇÅ) (‚âº-anti-symm s‚ÇÇ t‚ÇÇ)
```

Notoriously, `‚âº` should behave contravariantly with respect to
duality, namely if $A \leq B$ then we expect $B^\bot \leq
A^\bot$. This is proved below.

```agda
dual‚âº : ‚àÄ{A A' B B'} -> Dual A A' -> Dual B B' -> A ‚âº B -> B' ‚âº A'
dual‚âº d-ùüò-‚ä§ e sub-0 = sub-‚ä§
dual‚âº d d-‚ä§-ùüò sub-‚ä§ = sub-0
dual‚âº d-ùüô-‚ä• d-ùüô-‚ä• sub-1 = sub-‚ä•
dual‚âº d-‚ä•-ùüô d-‚ä•-ùüô sub-‚ä• = sub-1
dual‚âº (d-&-‚äï d‚ÇÅ d‚ÇÇ) (d-&-‚äï e‚ÇÅ e‚ÇÇ) (sub-& s‚ÇÅ s‚ÇÇ) = sub-‚äï (dual‚âº d‚ÇÅ e‚ÇÅ s‚ÇÅ) (dual‚âº d‚ÇÇ e‚ÇÇ s‚ÇÇ)
dual‚âº (d-‚äï-& d‚ÇÅ d‚ÇÇ) (d-‚äï-& e‚ÇÅ e‚ÇÇ) (sub-‚äï s‚ÇÅ s‚ÇÇ) = sub-& (dual‚âº d‚ÇÅ e‚ÇÅ s‚ÇÅ) (dual‚âº d‚ÇÇ e‚ÇÇ s‚ÇÇ)
dual‚âº (d-‚Öã-‚äó d‚ÇÅ d‚ÇÇ) (d-‚Öã-‚äó e‚ÇÅ e‚ÇÇ) (sub-‚Öã s‚ÇÅ s‚ÇÇ) = sub-‚äó (dual‚âº d‚ÇÅ e‚ÇÅ s‚ÇÅ) (dual‚âº d‚ÇÇ e‚ÇÇ s‚ÇÇ)
dual‚âº (d-‚äó-‚Öã d‚ÇÅ d‚ÇÇ) (d-‚äó-‚Öã e‚ÇÅ e‚ÇÇ) (sub-‚äó s‚ÇÅ s‚ÇÇ) = sub-‚Öã (dual‚âº d‚ÇÅ e‚ÇÅ s‚ÇÅ) (dual‚âº d‚ÇÇ e‚ÇÇ s‚ÇÇ)
```

## Soundness

For the results that follow, it is convenient to extend subtyping
from types to typing contexts pointwise.

```agda
infix 4 _‚âº‚Å∫_

data _‚âº‚Å∫_ : Context -> Context -> Set where
  zero : [] ‚âº‚Å∫ []
  succ : ‚àÄ{A B Œì Œî} -> A ‚âº B -> Œì ‚âº‚Å∫ Œî -> A :: Œì ‚âº‚Å∫ B :: Œî
```

Next we have two expected results relating subtyping (for typing
contexts) and splitting.

```agda
split‚âº‚Å∫ : ‚àÄ{Œì Œì‚ÇÅ Œì‚ÇÇ Œî} -> Œì ‚âº‚Å∫ Œî -> Œì ‚âÉ Œì‚ÇÅ + Œì‚ÇÇ ->
          ‚àÉ[ Œî‚ÇÅ ] ‚àÉ[ Œî‚ÇÇ ] Œî ‚âÉ Œî‚ÇÅ + Œî‚ÇÇ √ó Œì‚ÇÅ ‚âº‚Å∫ Œî‚ÇÅ √ó Œì‚ÇÇ ‚âº‚Å∫ Œî‚ÇÇ
split‚âº‚Å∫ zero split-e = [] , [] , split-e , zero , zero
split‚âº‚Å∫ (succ s‚ÇÅ s‚ÇÇ) (split-l p) with split‚âº‚Å∫ s‚ÇÇ p
... | Œî‚ÇÅ , Œî‚ÇÇ , p' , s‚ÇÉ , s‚ÇÑ = _ , _ , split-l p' , succ s‚ÇÅ s‚ÇÉ , s‚ÇÑ
split‚âº‚Å∫ (succ s‚ÇÅ s‚ÇÇ) (split-r p) with split‚âº‚Å∫ s‚ÇÇ p
... | _ , _ , p' , s‚ÇÉ , s‚ÇÑ = _ , _ , split-r p' , s‚ÇÉ , succ s‚ÇÅ s‚ÇÑ

split‚âº : ‚àÄ{Œì Œì' A Œî} -> Œì ‚âº‚Å∫ Œî -> Œì ‚âÉ A , Œì' ->
          ‚àÉ[ B ] ‚àÉ[ Œî' ] Œî ‚âÉ B , Œî' √ó A ‚âº B √ó Œì' ‚âº‚Å∫ Œî'
split‚âº s p with split‚âº‚Å∫ s p
... | _ , _ , p' , succ s‚ÇÅ zero , s‚ÇÉ = _ , _ , p' , s‚ÇÅ , s‚ÇÉ
```

We can now prove the soundness of subtyping as the following
**subsumption** result. Any process that is well typed in Œì can be
subsumed to a process that is well typed in Œî whenever Œì is a
subtyping context of Œî. Note that, in order to prove this result, we
use the [link elimination property](LinkElimination.lagda.md).

```agda
subsumption : ‚àÄ{Œì Œî} -> Œì ‚âº‚Å∫ Œî -> Process Œì -> Process Œî
subsumption s P with link-elimination P
... | _ , Plf = aux s Plf
  where
    aux : ‚àÄ{Œì Œî} {P : Process Œì} -> Œì ‚âº‚Å∫ Œî -> LinkFree P -> Process Œî
    aux s (fail p) with split‚âº s p
    ... | _ , _ , p' , sub-‚ä§ , _ = fail p'
    aux s (wait p Plf) with split‚âº s p
    ... | .‚ä§ , Œî' , p' , sub-‚ä§ , s‚ÇÇ = fail p'
    ... | .‚ä• , Œî' , p' , sub-‚ä• , s‚ÇÇ = wait p' (aux s‚ÇÇ Plf)
    aux s (case p Plf Qlf)  with split‚âº s p
    ... | _ , _ , p' , sub-‚ä§ , s‚ÇÉ = fail p'
    ... | _ , _ , p' , sub-& s‚ÇÅ s‚ÇÇ , s‚ÇÉ = case p' (aux (succ s‚ÇÅ s‚ÇÉ) Plf) (aux (succ s‚ÇÇ s‚ÇÉ) Qlf)
    aux s (join p Plf)  with split‚âº s p
    ... | _ , _ , p' , sub-‚ä§ , s‚ÇÇ = fail p'
    ... | _ , _ , p' , sub-‚Öã s‚ÇÅ s‚ÇÇ , s‚ÇÉ = join p' (aux (succ s‚ÇÇ (succ s‚ÇÅ s‚ÇÉ)) Plf)
    aux (succ sub-‚ä§ zero) close = fail (split-l split-e)
    aux (succ sub-1 zero) close = close
    aux s (select false p Plf)  with split‚âº s p
    ... | _ , _ , p' , sub-‚ä§ , s‚ÇÇ = fail p'
    ... | _ , _ , p' , sub-‚äï s‚ÇÅ s‚ÇÇ , s‚ÇÉ = select false p' (aux (succ s‚ÇÇ s‚ÇÉ) Plf)
    aux s (select true p Plf)  with split‚âº s p
    ... | _ , _ , p' , sub-‚ä§ , s‚ÇÇ = fail p'
    ... | _ , _ , p' , sub-‚äï s‚ÇÅ s‚ÇÇ , s‚ÇÉ = select true p' (aux (succ s‚ÇÅ s‚ÇÉ) Plf)
    aux s (fork p q Plf Qlf) with split‚âº s p
    ... | _ , _ , p' , sub-‚ä§ , s‚ÇÉ = fail p'
    ... | _ , _ , p' , sub-‚äó s‚ÇÅ s‚ÇÇ , s‚ÇÉ with split‚âº‚Å∫ s‚ÇÉ q
    ... | _ , _ , q' , s‚ÇÑ , s‚ÇÖ = fork p' q' (aux (succ s‚ÇÅ s‚ÇÑ) Plf) (aux (succ s‚ÇÇ s‚ÇÖ) Qlf)
    aux s (cut d p Plf Qlf)  with split‚âº‚Å∫ s p
    ... | _ , _ , p' , s‚ÇÅ , s‚ÇÇ = cut d p' (aux (succ ‚âº-refl s‚ÇÅ) Plf) (aux (succ ‚âº-refl s‚ÇÇ) Qlf)
```
